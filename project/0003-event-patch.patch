From b858fa5bf321f0c29220bbc5e794692502351dbc Mon Sep 17 00:00:00 2001
From: prehonor <ryx19891207@gmail.com>
Date: Tue, 5 Jul 2022 11:39:11 +0800
Subject: [PATCH 3/5] event patch

---
 plugins/cube/cube.cpp                 |  6 +++---
 plugins/scale/scale-title-filter.cpp  |  2 +-
 plugins/scale/scale.cpp               |  6 +++---
 plugins/single_plugins/alpha.cpp      |  2 +-
 plugins/single_plugins/command.cpp    |  4 ++--
 plugins/single_plugins/vswipe.cpp     |  4 ++--
 plugins/single_plugins/zoom.cpp       |  2 +-
 src/api/wayfire/nonstd/wlroots.hpp    |  4 ++--
 src/api/wayfire/plugin.hpp            |  4 ++--
 src/core/core.cpp                     |  4 ++--
 src/core/seat/bindings-repository.cpp |  2 +-
 src/core/seat/bindings-repository.hpp |  2 +-
 src/core/seat/cursor.cpp              |  4 ++--
 src/core/seat/keyboard.cpp            |  2 +-
 src/core/seat/pointer.cpp             | 22 +++++++++++-----------
 src/core/seat/pointer.hpp             | 22 +++++++++++-----------
 src/core/seat/switch.cpp              |  4 ++--
 src/core/seat/switch.hpp              |  2 +-
 src/core/seat/tablet.cpp              | 20 ++++++++++----------
 src/core/seat/tablet.hpp              | 16 ++++++++--------
 src/core/seat/touch.cpp               |  6 +++---
 src/core/wm.cpp                       |  2 +-
 22 files changed, 71 insertions(+), 71 deletions(-)

diff --git a/plugins/cube/cube.cpp b/plugins/cube/cube.cpp
index 411c155..6fe53b9 100644
--- a/plugins/cube/cube.cpp
+++ b/plugins/cube/cube.cpp
@@ -139,7 +139,7 @@ class wayfire_cube : public wf::plugin_interface_t
         };
 
         grab_interface->callbacks.pointer.axis = [=] (
-            wlr_event_pointer_axis *ev)
+            wlr_pointer_axis_event *ev)
         {
             if (ev->orientation == WLR_AXIS_ORIENTATION_VERTICAL)
             {
@@ -573,7 +573,7 @@ class wayfire_cube : public wf::plugin_interface_t
     wf::signal_connection_t on_motion_event = [=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_pointer_motion>*>(data);
+            wf::input_event_signal<wlr_pointer_motion_event>*>(data);
 
         pointer_moved(ev->event);
 
@@ -583,7 +583,7 @@ class wayfire_cube : public wf::plugin_interface_t
         ev->event->unaccel_dy = 0;
     };
 
-    void pointer_moved(wlr_event_pointer_motion *ev)
+    void pointer_moved(wlr_pointer_motion_event *ev)
     {
         if (animation.in_exit)
         {
diff --git a/plugins/scale/scale-title-filter.cpp b/plugins/scale/scale-title-filter.cpp
index ca25c33..9789492 100644
--- a/plugins/scale/scale-title-filter.cpp
+++ b/plugins/scale/scale-title-filter.cpp
@@ -210,7 +210,7 @@ class scale_title_filter : public wf::singleton_plugin_t<scale_title_filter_text
     wf::signal_connection_t scale_key = [this] (wf::signal_data_t *data)
     {
         auto k =
-            static_cast<wf::input_event_signal<wlr_event_keyboard_key>*>(data);
+            static_cast<wf::input_event_signal<wlr_keyboard_key_event>*>(data);
         if (k->event->state == WL_KEYBOARD_KEY_STATE_RELEASED)
         {
             keys.erase(k->event->keycode);
diff --git a/plugins/scale/scale.cpp b/plugins/scale/scale.cpp
index d2d5f6a..b50847e 100644
--- a/plugins/scale/scale.cpp
+++ b/plugins/scale/scale.cpp
@@ -333,7 +333,7 @@ class wayfire_scale : public wf::plugin_interface_t
     wf::signal_connection_t on_button_event = [=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_pointer_button>*>(data);
+            wf::input_event_signal<wlr_pointer_button_event>*>(data);
 
         process_input(ev->event->button, ev->event->state,
             wf::get_core().get_cursor_position());
@@ -342,7 +342,7 @@ class wayfire_scale : public wf::plugin_interface_t
     wf::signal_connection_t on_touch_down_event = [=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_touch_down>*>(data);
+            wf::input_event_signal<wlr_touch_down_event>*>(data);
         if (ev->event->touch_id == 0)
         {
             process_input(BTN_LEFT, WLR_BUTTON_PRESSED,
@@ -353,7 +353,7 @@ class wayfire_scale : public wf::plugin_interface_t
     wf::signal_connection_t on_touch_up_event = [=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_touch_up>*>(data);
+            wf::input_event_signal<wlr_touch_up_event>*>(data);
         if (ev->event->touch_id == 0)
         {
             process_input(BTN_LEFT, WLR_BUTTON_RELEASED,
diff --git a/plugins/single_plugins/alpha.cpp b/plugins/single_plugins/alpha.cpp
index 19c4334..5034251 100644
--- a/plugins/single_plugins/alpha.cpp
+++ b/plugins/single_plugins/alpha.cpp
@@ -78,7 +78,7 @@ class wayfire_alpha : public wf::plugin_interface_t
         }
     }
 
-    wf::axis_callback axis_cb = [=] (wlr_event_pointer_axis *ev)
+    wf::axis_callback axis_cb = [=] (wlr_pointer_axis_event *ev)
     {
         if (!output->activate_plugin(grab_interface))
         {
diff --git a/plugins/single_plugins/command.cpp b/plugins/single_plugins/command.cpp
index 1ba9d74..97a275c 100644
--- a/plugins/single_plugins/command.cpp
+++ b/plugins/single_plugins/command.cpp
@@ -152,7 +152,7 @@ class wayfire_command : public wf::plugin_interface_t
     wf::signal_connection_t on_button_event = [=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_pointer_button>*>(data);
+            wf::input_event_signal<wlr_pointer_button_event>*>(data);
         if ((ev->event->button == repeat.pressed_button) &&
             (ev->event->state == WLR_BUTTON_RELEASED))
         {
@@ -163,7 +163,7 @@ class wayfire_command : public wf::plugin_interface_t
     wf::signal_connection_t on_key_event = [=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_keyboard_key>*>(data);
+            wf::input_event_signal<wlr_keyboard_key_event>*>(data);
         if ((ev->event->keycode == repeat.pressed_key) &&
             (ev->event->state == WLR_KEY_RELEASED))
         {
diff --git a/plugins/single_plugins/vswipe.cpp b/plugins/single_plugins/vswipe.cpp
index f5f9f4b..a107b38 100644
--- a/plugins/single_plugins/vswipe.cpp
+++ b/plugins/single_plugins/vswipe.cpp
@@ -154,7 +154,7 @@ class vswipe : public wf::plugin_interface_t
         }
 
         auto ev = static_cast<
-            event<wlr_event_pointer_swipe_begin>*>(data)->event;
+            event<wlr_pointer_swipe_begin_event>*>(data)->event;
         if (static_cast<int>(ev->fingers) != fingers)
         {
             return;
@@ -257,7 +257,7 @@ class vswipe : public wf::plugin_interface_t
         }
 
         auto ev = static_cast<
-            event<wlr_event_pointer_swipe_update>*>(data)->event;
+            event<wlr_pointer_swipe_update_event>*>(data)->event;
 
         state.delta_sum.x += ev->dx / speed_factor;
         state.delta_sum.y += ev->dy / speed_factor;
diff --git a/plugins/single_plugins/zoom.cpp b/plugins/single_plugins/zoom.cpp
index 796aa15..fd6b004 100644
--- a/plugins/single_plugins/zoom.cpp
+++ b/plugins/single_plugins/zoom.cpp
@@ -49,7 +49,7 @@ class wayfire_zoom_screen : public wf::plugin_interface_t
         }
     }
 
-    wf::axis_callback axis = [=] (wlr_event_pointer_axis *ev)
+    wf::axis_callback axis = [=] (wlr_pointer_axis_event *ev)
     {
         if (!output->can_activate_plugin(grab_interface))
         {
diff --git a/src/api/wayfire/nonstd/wlroots.hpp b/src/api/wayfire/nonstd/wlroots.hpp
index 30e7367..b29607d 100644
--- a/src/api/wayfire/nonstd/wlroots.hpp
+++ b/src/api/wayfire/nonstd/wlroots.hpp
@@ -38,8 +38,8 @@ extern "C"
     struct wlr_xdg_foreign_v2;
     struct wlr_xdg_foreign_registry;
 
-    struct wlr_event_pointer_axis;
-    struct wlr_event_pointer_motion;
+    struct wlr_pointer_axis_event;
+    struct wlr_pointer_motion_event;
     struct wlr_output_layout;
     struct wlr_surface;
     struct wlr_texture;
diff --git a/src/api/wayfire/plugin.hpp b/src/api/wayfire/plugin.hpp
index 1d61cc5..7a06545 100644
--- a/src/api/wayfire/plugin.hpp
+++ b/src/api/wayfire/plugin.hpp
@@ -76,10 +76,10 @@ struct plugin_grab_interface_t
     {
         struct
         {
-            std::function<void(wlr_event_pointer_axis*)> axis;
+            std::function<void(wlr_pointer_axis_event*)> axis;
             std::function<void(uint32_t, uint32_t)> button; // button, state
             std::function<void(int32_t, int32_t)> motion; // x, y
-            std::function<void(wlr_event_pointer_motion*)> relative_motion;
+            std::function<void(wlr_pointer_motion_event*)> relative_motion;
         } pointer;
 
         struct
diff --git a/src/core/core.cpp b/src/core/core.cpp
index caf7093..c850357 100644
--- a/src/core/core.cpp
+++ b/src/core/core.cpp
@@ -251,7 +251,7 @@ void wf::compositor_core_impl_t::init()
     vkbd_created.set_callback([&] (void *data)
     {
         auto kbd = (wlr_virtual_keyboard_v1*)data;
-        input->handle_new_input(&kbd->input_device);
+        input->handle_new_input(&kbd->keyboard.base);
     });
     vkbd_created.connect(&protocols.vkbd_manager->events.new_virtual_keyboard);
 
@@ -260,7 +260,7 @@ void wf::compositor_core_impl_t::init()
     {
         auto event = (wlr_virtual_pointer_v1_new_pointer_event*)data;
         auto ptr   = event->new_pointer;
-        input->handle_new_input(&ptr->input_device);
+        input->handle_new_input(&ptr->pointer.base);
     });
     vptr_created.connect(&protocols.vptr_manager->events.new_virtual_pointer);
 
diff --git a/src/core/seat/bindings-repository.cpp b/src/core/seat/bindings-repository.cpp
index 4058e9d..9ff346e 100644
--- a/src/core/seat/bindings-repository.cpp
+++ b/src/core/seat/bindings-repository.cpp
@@ -55,7 +55,7 @@ bool wf::bindings_repository_t::handle_key(const wf::keybinding_t& pressed,
 }
 
 bool wf::bindings_repository_t::handle_axis(uint32_t modifiers,
-    wlr_event_pointer_axis *ev)
+    wlr_pointer_axis_event *ev)
 {
     std::vector<wf::axis_callback*> callbacks;
 
diff --git a/src/core/seat/bindings-repository.hpp b/src/core/seat/bindings-repository.hpp
index fc57a2a..4a5597e 100644
--- a/src/core/seat/bindings-repository.hpp
+++ b/src/core/seat/bindings-repository.hpp
@@ -30,7 +30,7 @@ class bindings_repository_t
     bool handle_key(const wf::keybinding_t& pressed, uint32_t mod_binding_key);
 
     /** Handle an axis event. */
-    bool handle_axis(uint32_t modifiers, wlr_event_pointer_axis *ev);
+    bool handle_axis(uint32_t modifiers, wlr_pointer_axis_event *ev);
 
     /**
      * Handle a buttonbinding pressed by the user.
diff --git a/src/core/seat/cursor.cpp b/src/core/seat/cursor.cpp
index 9ef011c..f3459cf 100644
--- a/src/core/seat/cursor.cpp
+++ b/src/core/seat/cursor.cpp
@@ -59,7 +59,7 @@ void wf::cursor_t::setup_listeners()
 #define setup_passthrough_callback(evname) \
     on_ ## evname.set_callback([&] (void *data) { \
         set_touchscreen_mode(false); \
-        auto ev   = static_cast<wlr_event_pointer_ ## evname*>(data); \
+        auto ev   = static_cast<wlr_pointer_##evname## _event*>(data); \
         auto mode = emit_device_event_signal("pointer_" #evname, ev); \
         seat->lpointer->handle_pointer_ ## evname(ev, mode); \
         wlr_idle_notify_activity(core.protocols.idle, core.get_current_seat()); \
@@ -88,7 +88,7 @@ void wf::cursor_t::setup_listeners()
 #define setup_tablet_callback(evname) \
     on_tablet_ ## evname.set_callback([&] (void *data) { \
         set_touchscreen_mode(false); \
-        auto ev = static_cast<wlr_event_tablet_tool_ ## evname*>(data); \
+        auto ev = static_cast<wlr_tablet_tool_##evname## _event*>(data); \
         auto handling_mode = emit_device_event_signal("tablet_" #evname, ev); \
         if (ev->device->tablet->data) { \
             auto tablet = \
diff --git a/src/core/seat/keyboard.cpp b/src/core/seat/keyboard.cpp
index 0de0307..08d450a 100644
--- a/src/core/seat/keyboard.cpp
+++ b/src/core/seat/keyboard.cpp
@@ -23,7 +23,7 @@ void wf::keyboard_t::setup_listeners()
 
     on_key.set_callback([&] (void *data)
     {
-        auto ev   = static_cast<wlr_event_keyboard_key*>(data);
+        auto ev   = static_cast<wlr_keyboard_key_event*>(data);
         auto mode = emit_device_event_signal("keyboard_key", ev);
 
         auto& seat = wf::get_core_impl().seat;
diff --git a/src/core/seat/pointer.cpp b/src/core/seat/pointer.cpp
index d87d55d..aaf7149 100644
--- a/src/core/seat/pointer.cpp
+++ b/src/core/seat/pointer.cpp
@@ -329,7 +329,7 @@ void wf::pointer_t::grab_surface(wf::surface_interface_t *surface)
 }
 
 /* ----------------------- Input event processing --------------------------- */
-void wf::pointer_t::handle_pointer_button(wlr_event_pointer_button *ev,
+void wf::pointer_t::handle_pointer_button(wlr_pointer_button_event *ev,
     input_event_processing_mode_t mode)
 {
     seat->break_mod_bindings();
@@ -379,7 +379,7 @@ void wf::pointer_t::check_implicit_grab()
     }
 }
 
-void wf::pointer_t::send_button(wlr_event_pointer_button *ev, bool has_binding)
+void wf::pointer_t::send_button(wlr_pointer_button_event *ev, bool has_binding)
 {
     if (input->active_grab)
     {
@@ -446,7 +446,7 @@ void wf::pointer_t::send_motion(uint32_t time_msec, wf::pointf_t local)
     }
 }
 
-void wf::pointer_t::handle_pointer_motion(wlr_event_pointer_motion *ev,
+void wf::pointer_t::handle_pointer_motion(wlr_pointer_motion_event *ev,
     input_event_processing_mode_t mode)
 {
     if (input->input_grabbed() &&
@@ -488,7 +488,7 @@ void wf::pointer_t::handle_pointer_motion(wlr_event_pointer_motion *ev,
 }
 
 void wf::pointer_t::handle_pointer_motion_absolute(
-    wlr_event_pointer_motion_absolute *ev, input_event_processing_mode_t mode)
+    wlr_pointer_motion_absolute_event *ev, input_event_processing_mode_t mode)
 {
     // next coordinates
     double cx, cy;
@@ -517,7 +517,7 @@ void wf::pointer_t::handle_pointer_motion_absolute(
     update_cursor_position(ev->time_msec);
 }
 
-void wf::pointer_t::handle_pointer_axis(wlr_event_pointer_axis *ev,
+void wf::pointer_t::handle_pointer_axis(wlr_pointer_axis_event *ev,
     input_event_processing_mode_t mode)
 {
     bool handled_in_binding = input->get_active_bindings().handle_axis(
@@ -557,7 +557,7 @@ void wf::pointer_t::handle_pointer_axis(wlr_event_pointer_axis *ev,
         mult * ev->delta, mult * ev->delta_discrete, ev->source);
 }
 
-void wf::pointer_t::handle_pointer_swipe_begin(wlr_event_pointer_swipe_begin *ev,
+void wf::pointer_t::handle_pointer_swipe_begin(wlr_pointer_swipe_begin_event *ev,
     input_event_processing_mode_t mode)
 {
     wlr_pointer_gestures_v1_send_swipe_begin(
@@ -566,14 +566,14 @@ void wf::pointer_t::handle_pointer_swipe_begin(wlr_event_pointer_swipe_begin *ev
 }
 
 void wf::pointer_t::handle_pointer_swipe_update(
-    wlr_event_pointer_swipe_update *ev, input_event_processing_mode_t mode)
+    wlr_pointer_swipe_update_event *ev, input_event_processing_mode_t mode)
 {
     wlr_pointer_gestures_v1_send_swipe_update(
         wf::get_core().protocols.pointer_gestures, seat->seat,
         ev->time_msec, ev->dx, ev->dy);
 }
 
-void wf::pointer_t::handle_pointer_swipe_end(wlr_event_pointer_swipe_end *ev,
+void wf::pointer_t::handle_pointer_swipe_end(wlr_pointer_swipe_end_event *ev,
     input_event_processing_mode_t mode)
 {
     wlr_pointer_gestures_v1_send_swipe_end(
@@ -581,7 +581,7 @@ void wf::pointer_t::handle_pointer_swipe_end(wlr_event_pointer_swipe_end *ev,
         ev->time_msec, ev->cancelled);
 }
 
-void wf::pointer_t::handle_pointer_pinch_begin(wlr_event_pointer_pinch_begin *ev,
+void wf::pointer_t::handle_pointer_pinch_begin(wlr_pointer_pinch_begin_event *ev,
     input_event_processing_mode_t mode)
 {
     wlr_pointer_gestures_v1_send_pinch_begin(
@@ -590,14 +590,14 @@ void wf::pointer_t::handle_pointer_pinch_begin(wlr_event_pointer_pinch_begin *ev
 }
 
 void wf::pointer_t::handle_pointer_pinch_update(
-    wlr_event_pointer_pinch_update *ev, input_event_processing_mode_t mode)
+    wlr_pointer_pinch_update_event *ev, input_event_processing_mode_t mode)
 {
     wlr_pointer_gestures_v1_send_pinch_update(
         wf::get_core().protocols.pointer_gestures, seat->seat,
         ev->time_msec, ev->dx, ev->dy, ev->scale, ev->rotation);
 }
 
-void wf::pointer_t::handle_pointer_pinch_end(wlr_event_pointer_pinch_end *ev,
+void wf::pointer_t::handle_pointer_pinch_end(wlr_pointer_pinch_end_event *ev,
     input_event_processing_mode_t mode)
 {
     wlr_pointer_gestures_v1_send_pinch_end(
diff --git a/src/core/seat/pointer.hpp b/src/core/seat/pointer.hpp
index 8b042b0..2489439 100644
--- a/src/core/seat/pointer.hpp
+++ b/src/core/seat/pointer.hpp
@@ -65,27 +65,27 @@ class pointer_t
     wlr_pointer_constraint_v1 *get_active_pointer_constraint();
 
     /** Handle events coming from the input devices */
-    void handle_pointer_axis(wlr_event_pointer_axis *ev,
+    void handle_pointer_axis(wlr_pointer_axis_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_motion(wlr_event_pointer_motion *ev,
+    void handle_pointer_motion(wlr_pointer_motion_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_motion_absolute(wlr_event_pointer_motion_absolute *ev,
+    void handle_pointer_motion_absolute(wlr_pointer_motion_absolute_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_button(wlr_event_pointer_button *ev,
+    void handle_pointer_button(wlr_pointer_button_event *ev,
         input_event_processing_mode_t mode);
 
     /** Handle touchpad gestures detected by libinput */
-    void handle_pointer_swipe_begin(wlr_event_pointer_swipe_begin *ev,
+    void handle_pointer_swipe_begin(wlr_pointer_swipe_begin_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_swipe_update(wlr_event_pointer_swipe_update *ev,
+    void handle_pointer_swipe_update(wlr_pointer_swipe_update_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_swipe_end(wlr_event_pointer_swipe_end *ev,
+    void handle_pointer_swipe_end(wlr_pointer_swipe_end_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_pinch_begin(wlr_event_pointer_pinch_begin *ev,
+    void handle_pointer_pinch_begin(wlr_pointer_pinch_begin_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_pinch_update(wlr_event_pointer_pinch_update *ev,
+    void handle_pointer_pinch_update(wlr_pointer_pinch_update_event *ev,
         input_event_processing_mode_t mode);
-    void handle_pointer_pinch_end(wlr_event_pointer_pinch_end *ev,
+    void handle_pointer_pinch_end(wlr_pointer_pinch_end_event *ev,
         input_event_processing_mode_t mode);
     void handle_pointer_hold_begin(wlr_event_pointer_hold_begin *ev,
         input_event_processing_mode_t mode);
@@ -155,7 +155,7 @@ class pointer_t
 
     /** Send a button event to the currently active receiver, i.e to the
      * active input grab(if any), or to the focused surface */
-    void send_button(wlr_event_pointer_button *ev, bool has_binding);
+    void send_button(wlr_pointer_button_event *ev, bool has_binding);
 
     /**
      * Send a motion event to the currently active receiver, i.e to the
diff --git a/src/core/seat/switch.cpp b/src/core/seat/switch.cpp
index fc7dbe1..c3c50cd 100644
--- a/src/core/seat/switch.cpp
+++ b/src/core/seat/switch.cpp
@@ -7,12 +7,12 @@ wf::switch_device_t::switch_device_t(wlr_input_device *dev) :
 {
     on_switch.set_callback([&] (void *data)
     {
-        this->handle_switched((wlr_event_switch_toggle*)data);
+        this->handle_switched((wlr_switch_toggle_event*)data);
     });
     on_switch.connect(&dev->switch_device->events.toggle);
 }
 
-void wf::switch_device_t::handle_switched(wlr_event_switch_toggle *ev)
+void wf::switch_device_t::handle_switched(wlr_switch_toggle_event *ev)
 {
     wf::switch_signal data;
     data.device = nonstd::make_observer(this);
diff --git a/src/core/seat/switch.hpp b/src/core/seat/switch.hpp
index e214f2e..16f2525 100644
--- a/src/core/seat/switch.hpp
+++ b/src/core/seat/switch.hpp
@@ -8,7 +8,7 @@ namespace wf
 struct switch_device_t : public input_device_impl_t
 {
     wf::wl_listener_wrapper on_switch;
-    void handle_switched(wlr_event_switch_toggle *ev);
+    void handle_switched(wlr_switch_toggle_event *ev);
 
     switch_device_t(wlr_input_device *dev);
     virtual ~switch_device_t() = default;
diff --git a/src/core/seat/tablet.cpp b/src/core/seat/tablet.cpp
index a1e1688..4de53f4 100644
--- a/src/core/seat/tablet.cpp
+++ b/src/core/seat/tablet.cpp
@@ -162,7 +162,7 @@ void wf::tablet_tool_t::set_focus(wf::surface_interface_t *surface)
     }
 }
 
-void wf::tablet_tool_t::passthrough_axis(wlr_event_tablet_tool_axis *ev)
+void wf::tablet_tool_t::passthrough_axis(wlr_tablet_tool_axis_event *ev)
 {
     if (ev->updated_axes & WLR_TABLET_TOOL_AXIS_PRESSURE)
     {
@@ -207,7 +207,7 @@ void wf::tablet_tool_t::passthrough_axis(wlr_event_tablet_tool_axis *ev)
     }
 }
 
-void wf::tablet_tool_t::handle_tip(wlr_event_tablet_tool_tip *ev)
+void wf::tablet_tool_t::handle_tip(wlr_tablet_tool_tip_event *ev)
 {
     /* Nothing to do without a proximity surface */
     if (!this->proximity_surface)
@@ -236,14 +236,14 @@ void wf::tablet_tool_t::handle_tip(wlr_event_tablet_tool_tip *ev)
     }
 }
 
-void wf::tablet_tool_t::handle_button(wlr_event_tablet_tool_button *ev)
+void wf::tablet_tool_t::handle_button(wlr_tablet_tool_button_event *ev)
 {
     wlr_tablet_v2_tablet_tool_notify_button(tool_v2,
         (zwp_tablet_pad_v2_button_state)ev->button,
         (zwp_tablet_pad_v2_button_state)ev->state);
 }
 
-void wf::tablet_tool_t::handle_proximity(wlr_event_tablet_tool_proximity *ev)
+void wf::tablet_tool_t::handle_proximity(wlr_tablet_tool_proximity_event *ev)
 {
     if (ev->state == WLR_TABLET_TOOL_PROXIMITY_OUT)
     {
@@ -284,7 +284,7 @@ wf::tablet_tool_t*wf::tablet_t::ensure_tool(wlr_tablet_tool *tool)
     return (wf::tablet_tool_t*)tool->data;
 }
 
-void wf::tablet_t::handle_tip(wlr_event_tablet_tool_tip *ev,
+void wf::tablet_t::handle_tip(wlr_tablet_tool_tip_event *ev,
     input_event_processing_mode_t mode)
 {
     auto& input = wf::get_core_impl().input;
@@ -323,7 +323,7 @@ void wf::tablet_t::handle_tip(wlr_event_tablet_tool_tip *ev,
     }
 }
 
-void wf::tablet_t::handle_axis(wlr_event_tablet_tool_axis *ev,
+void wf::tablet_t::handle_axis(wlr_tablet_tool_axis_event *ev,
     input_event_processing_mode_t mode)
 {
     auto& input = wf::get_core_impl().input;
@@ -359,14 +359,14 @@ void wf::tablet_t::handle_axis(wlr_event_tablet_tool_axis *ev,
     tool->passthrough_axis(ev);
 }
 
-void wf::tablet_t::handle_button(wlr_event_tablet_tool_button *ev,
+void wf::tablet_t::handle_button(wlr_tablet_tool_button_event *ev,
     input_event_processing_mode_t mode)
 {
     /* Pass to the tool */
     ensure_tool(ev->tool)->handle_button(ev);
 }
 
-void wf::tablet_t::handle_proximity(wlr_event_tablet_tool_proximity *ev,
+void wf::tablet_t::handle_proximity(wlr_tablet_tool_proximity_event *ev,
     input_event_processing_mode_t mode)
 {
     ensure_tool(ev->tool)->handle_proximity(ev);
@@ -421,7 +421,7 @@ wf::tablet_pad_t::tablet_pad_t(wlr_input_device *pad) :
 
     on_button.set_callback([=] (void *data)
     {
-        auto ev = static_cast<wlr_event_tablet_pad_button*>(data);
+        auto ev = static_cast<wlr_tablet_pad_button_event*>(data);
         wlr_tablet_v2_tablet_pad_notify_mode(pad_v2,
             ev->group, ev->mode, ev->time_msec);
         wlr_tablet_v2_tablet_pad_notify_button(pad_v2,
@@ -431,7 +431,7 @@ wf::tablet_pad_t::tablet_pad_t(wlr_input_device *pad) :
 
     on_strip.set_callback([=] (void *data)
     {
-        auto ev = static_cast<wlr_event_tablet_pad_strip*>(data);
+        auto ev = static_cast<wlr_tablet_pad_ring_event*>(data);
         wlr_tablet_v2_tablet_pad_notify_strip(pad_v2, ev->strip, ev->position,
             ev->source == WLR_TABLET_PAD_STRIP_SOURCE_FINGER, ev->time_msec);
     });
diff --git a/src/core/seat/tablet.hpp b/src/core/seat/tablet.hpp
index 647e716..67cd253 100644
--- a/src/core/seat/tablet.hpp
+++ b/src/core/seat/tablet.hpp
@@ -31,18 +31,18 @@ struct tablet_tool_t
      * Send the axis updates directly.
      * Only the position is handled separately.
      */
-    void passthrough_axis(wlr_event_tablet_tool_axis *ev);
+    void passthrough_axis(wlr_tablet_tool_axis_event *ev);
 
     /**
      * Called whenever a tip occurs for this tool
      */
-    void handle_tip(wlr_event_tablet_tool_tip *ev);
+    void handle_tip(wlr_tablet_tool_tip_event *ev);
 
     /** Handle a button event */
-    void handle_button(wlr_event_tablet_tool_button *ev);
+    void handle_button(wlr_tablet_tool_button_event *ev);
 
     /** Set proximity state */
-    void handle_proximity(wlr_event_tablet_tool_proximity *ev);
+    void handle_proximity(wlr_tablet_tool_proximity_event *ev);
 
   private:
     wf::wl_listener_wrapper on_destroy, on_set_cursor;
@@ -75,16 +75,16 @@ struct tablet_t : public input_device_impl_t
     virtual ~tablet_t();
 
     /** Handle a tool tip event */
-    void handle_tip(wlr_event_tablet_tool_tip *ev,
+    void handle_tip(wlr_tablet_tool_tip_event *ev,
         input_event_processing_mode_t mode);
     /** Handle an axis event */
-    void handle_axis(wlr_event_tablet_tool_axis *ev,
+    void handle_axis(wlr_tablet_tool_axis_event *ev,
         input_event_processing_mode_t mode);
     /** Handle a button event */
-    void handle_button(wlr_event_tablet_tool_button *ev,
+    void handle_button(wlr_tablet_tool_button_event *ev,
         input_event_processing_mode_t mode);
     /** Handle a proximity event */
-    void handle_proximity(wlr_event_tablet_tool_proximity *ev,
+    void handle_proximity(wlr_tablet_tool_proximity_event *ev,
         input_event_processing_mode_t mode);
 
     wlr_tablet_v2_tablet *tablet_v2;
diff --git a/src/core/seat/touch.cpp b/src/core/seat/touch.cpp
index 3d9a527..9695db6 100644
--- a/src/core/seat/touch.cpp
+++ b/src/core/seat/touch.cpp
@@ -21,7 +21,7 @@ wf::touch_interface_t::touch_interface_t(wlr_cursor *cursor, wlr_seat *seat,
     // connect handlers
     on_down.set_callback([=] (void *data)
     {
-        auto ev   = static_cast<wlr_event_touch_down*>(data);
+        auto ev   = static_cast<wlr_touch_down_event*>(data);
         auto mode = emit_device_event_signal("touch_down", ev);
 
         double lx, ly;
@@ -38,7 +38,7 @@ wf::touch_interface_t::touch_interface_t(wlr_cursor *cursor, wlr_seat *seat,
 
     on_up.set_callback([=] (void *data)
     {
-        auto ev   = static_cast<wlr_event_touch_up*>(data);
+        auto ev   = static_cast<wlr_touch_up_event*>(data);
         auto mode = emit_device_event_signal("touch_up", ev);
         handle_touch_up(ev->touch_id, ev->time_msec, mode);
         wlr_idle_notify_activity(wf::get_core().protocols.idle,
@@ -48,7 +48,7 @@ wf::touch_interface_t::touch_interface_t(wlr_cursor *cursor, wlr_seat *seat,
 
     on_motion.set_callback([=] (void *data)
     {
-        auto ev   = static_cast<wlr_event_touch_motion*>(data);
+        auto ev   = static_cast<wlr_touch_motion_event*>(data);
         auto mode = emit_device_event_signal("touch_motion", ev);
 
         double lx, ly;
diff --git a/src/core/wm.cpp b/src/core/wm.cpp
index bbc66f7..86a3d9a 100644
--- a/src/core/wm.cpp
+++ b/src/core/wm.cpp
@@ -86,7 +86,7 @@ void wayfire_focus::init()
     on_button.set_callback([=] (wf::signal_data_t *data)
     {
         auto ev = static_cast<
-            wf::input_event_signal<wlr_event_pointer_button>*>(data);
+            wf::input_event_signal<wlr_pointer_button_event>*>(data);
 
         if (ev->event->state != WLR_BUTTON_PRESSED)
         {
-- 
2.36.0

